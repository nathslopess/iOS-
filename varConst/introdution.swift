/*
    Vari√°veis e Constantes

        A cria√ß√£o de vari√°veis em Swift √© feita atrav√©s do uso da palavra resevada VAR, que indica o in√≠cio da 
        declara√ß√£o de um objeto cujo o valor pode mudar ao longo do c√≥digo (obejto mut√°vel ou vari√°vel). Para
        criarmos uma vari√°vel, iniciamos com a palavra VAR seguida do nome que queremos atribuir a ela, dois
        pontos, o tipo da mesma e a atribui√ß√£o do valor (inicializa√ß√£o da vari√°vel).

        Uma das caracter√≠sticas da linguagem Swift √© que trabalha com o que chamamos de Infer√™ncia de Tipo, 
        ou seja, n√£o √© obrigat√≥rio a defini√ß√£o do tipo da uma VAR, pois caso inicializa a mesma durante a sua 
        declara√ß√£o, ela interpreta o tipo do valor que est√° sendo atribuido √†quela vari√°vel e o define automaticamente.
*/



//Criando vari√°vel com tipo expl√≠cito
    var name: String = "Nathalia Lopes"


//Criando vari√°vel utilizando infer√™ncia de tipo
    var name2 = "Amanda Oliveira"


/*
    N√£o h√° diferen√ßa alguma para a linguagem se criarmos uma vari√°vel como foi feito para o NAME ou a maneira usada para o
    NAME2. Na primeira forma, definimos explicitamente que tipo de vari√°vel √© (String), ja na segunda, a pr√≥pria linguagem 
    atribuiu String √† vari√°vel com base no conte√∫do atribu√≠do a ela. 

    Um detalhe que devemos atentar em Swift √© que toda e qualquer vari√°vel precisa ter um valor atribu√≠do antes de sua utiliza√ß√£o,
    seja na sua pr√≥pria defini√ß√£o ou atrav√©s do construtor da classe onde a vari√°vel se encontra. 

    Vari√°veis s√£o criadas comec√ßando com caracteres min√∫sculos e caso sejam compostas de mais de uma palavra, usamos o lowerCamelCase, 
    ou seja, a primeira palavra se inicia em letra min√∫scula, por√©m cada nova palavra se inicia mai√∫scula.

    Todo c√≥digo-fonte criado aqui usar√° nomes de vari√°veis, m√©todos, classes e etc em Ingl√™s. Utilizarei essa abordagem, pois no mercado
    de trabalho a grande maioria dos Developers programam utilizando c√≥digos escritos em Ingl√™s. Al√©m de ser uma linguagem universal em
    programa√ß√£o, fica f√°cil de trabalhar com times de qualquer lugar do mundo, algo bem comum nos dias atuais, principalmente em empresas
    multinacionais. 

*/


//Usando lowerCamelCase
    var firstName = "Pedro"
    var lastName = "Scooby"


/*
    Vari√°veis n√£o podem come√ßar com n√∫meros e tamb√©m n√£o podem conter espa√ßo entre as palavras, por√©m Swift √© uma das poucas (sen√£o a √∫nica)
    linguagem a oferecer a possuibilidade de trabalhar com emojis no lugar do nome em vari√°veis. Obviamente n√£o faremos isso em um projeto 
    real por n√£o ser algo intuitivo, por√©m a Apple disponibilizou essa feature na linguagem com o intuito de trazer pessoas cada vez mais 
    novas para o mundo da programa√ß√£o, inclusive crian√ßas, e nada melhor do que permitir o uso de emojis para tornar o aprendizado mais 
    divertido. Ent√£o, Swift √© perfeitamente poss√≠vel fazer algo como: 
*/

    var üê∂ = "Billy"
    var üëø = "capetinha"
    var üí© = "coc√¥"    
    print("O meu cachorro se chama", üê∂, "e √© um verdadeiro", üëø, "pois faz", üí©, "na casa toda")


/*

DICAS: 
    - Para utilizar um emoji, aperte as teclas Command + Control + Space, assim, o painel de emojis ir√° aparecer. 
    S√≥ n√£o s√£o v√°lidos os emojis que em seu c√≥digo interno come√ßam com um n√∫mero. 

    Tamb√©m √© poss√≠vel produzir diversas vari√°veis na mesma linha, separando por v√≠rgula cada vari√°vel, por√©m utili-
    -zando VAR somente uma vez.

*/


//Criando 3 vari√°veis em apenas uma lihha de comando
    var x = 12, y = "hi", z = 3.3


/*
    Para criarmos constantes, ou seja, objetos que n√£o modificam seu valor ao longo do c√≥digo (objetos imut√°veis), 
    a sintaxe √© quase a mesma √† de produ√ß√£o de vari√°veis, por√©m com o uso da palavra reservada LET no lugar de VAR.

*/

//Criando constantes
    let pi = 3.141592
    let gravity = 9.81

    //Note que n√£o √© poss√≠vel alterar o valor de uma constante
    gravity = 10.01 //Erro que aparecer√° ap√≥s a tentativa de execu√ß√£o do c√≥digo


/*

DICAS: 
    - Sempre procure utilizar constantes em seu c√≥digo, a menos que realmente precise modificar o objeto futuramente.
    O acesso √†s constantes na mem√≥ria √© mais r√°pido do que o acesso √†s vari√°veis. Durante o processo de programa√ß√£o 
    dentro do Xcode, para todas as vari√°veis encontradas no seu c√≥digo que n√£o tiverem seu conte√∫do alterado,ser√° 
    segurida a mudan√ßa da declara√ß√£o para LET. 

*/

-----------------------------------------------------------------------------------------------------------------------


/*

    TIPOS

        Existem certos tipos predefinidos em Swift que s√£o utilizados com muita frequ√™ncia. Algumas linguagens costumam 
        chamar esses tipos de Tipos Primitivos, por√©m essa nomenclatura n√£o √© usada em Swift. Dentre essa lista de tipos 
        (que na verdaede s√£o Structs, assunto que ser√° abordado mais para frente), n√≥s temos tipos para trabalhar com n√∫-
        -meros inteiros, n√∫meros com casas decimais valores booleanos, entre outros. 

*/

// int(Inteiros)
    var value1: Int = 500       //Aqui a infer√™ncia √© para Int
    var myAge: UInt8 = 39      //Id√™ntico √† linha acima por√©m somente valores positivos com varia√ß√£o 8bits

    print(Int.max)
    print(Int.min)

